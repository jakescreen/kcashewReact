{"version":3,"sources":["components/NovelArticles.js","components/Novels.js","components/TwitchArticles.js","components/Twitch.js","App.js","serviceWorker.js","index.js"],"names":["NovelArticles","yeet","push","this","props","novs","map","item","i","className","key","href","link","title","date","React","Component","Novels","state","links","posts","tmpPosts","expectedLength","length","fetch","then","response","json","data","j","publishDateFormatted","arr","setState","TwitchArticles","channel1","channel2","handleClick1","bind","handleClick2","e","id","usrs","name","onClick","console","log","src","allowFullScreen","width","height","Twitch","users","method","headers","Response","newUrl","to_name","slice","rtn","toString","user_name","status","type","App","Navbar","bg","variant","fixed","Brand","Nav","Link","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b265211f.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class NovelArticles extends React.Component {\n    render() {\n        var yeet = [];\n        //pushes props into array on relaod and displays, emptying on rerender\n        yeet.push(this.props.novs.map((item, i) => {\n            return <div className=\"post\" key={i}>\n                <a href={item.link}>{item.title}</a>\n                <p>{item.date}</p>\n                </div>\n        }))\n        return (\n            <div>{yeet}</div>\n        );\n    }\n\n}","import React from \"react\";\nimport NovelArticles from \"./NovelArticles\";\nclass Novels extends React.Component {\n    //contains links to webnovels and their latest 2 posts\n    state = {\n        links: [\n            \"https://www.royalroad.com/fiction/syndication/16946\",\n            \"https://www.royalroad.com/fiction/syndication/26294\",\n            \"https://www.royalroad.com/fiction/syndication/25275\",\n            \"https://www.royalroad.com/fiction/syndication/12024\"\n        ],\n        posts: []\n    };\n    //loads novel posts into the state on load\n    componentDidMount() {\n        var tmpPosts = []; //array to return of posts\n        var expectedLength = this.state.links.length; //how many links to fetch\n        for (let i = 0; i < expectedLength; i++) {\n            //fetches link with 2 posts each\n            fetch(\"https://feed.jquery-plugins.net/load?url=\" + this.state.links[i] + \"&maxCount=2&ShowDesc=false\")\n                .then(response => response.json())//returns array size 2 of json object posts\n                .then(data => {\n                    //pulls the title, link, and date of each post and adds to tmpPosts\n                    for (let j = 0; j < data.data.length; j++) {\n                        tmpPosts.push({ title: data.data[j].title, date: data.data[j].publishDateFormatted, link: data.data[j].link });\n                    }\n                    return tmpPosts;\n                })\n                .then(arr => {\n                    //sets state once all posts are in\n                    if (arr.length === expectedLength * 2) {\n                        this.setState({ posts: arr });\n                    }\n                });\n        }\n    }\n    render() {\n        return (\n            <div className=\"novelsMain\">\n                <h4>Novels</h4>\n                <NovelArticles novs={this.state.posts} />\n            </div>\n        );\n    }\n}\nexport default Novels;","import React from \"react\";\nimport ReactTwitchEmbedVideo from \"react-twitch-embed-video\";\n\nexport default class TwitchArticles extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleClick1 = this.handleClick1.bind(this);\n        this.handleClick2 = this.handleClick2.bind(this);\n\n    }\n\n    state = {\n        channel1: \"monstercat\",\n        channel2: \"FrostPrime_\"\n    }\n\n    handleClick1(e, id) {\n        this.setState({ channel1: id, channel2: this.state.channel2 })\n    }\n    handleClick2(e, id) {\n        this.setState({ channel1: this.state.channel1, channel2: id})\n    }\n\n\n\n\n    render() {\n        var yeet = [];\n        //pushes props into array on relaod and displays, emptying on rerender\n        yeet.push(this.props.usrs.map((item, i) => {\n            return <div className=\"post\" key={i}>\n                <h5>{item.name}</h5>\n                <p>{item.title}</p>\n                <button id=\"1\" onClick={(e) => this.handleClick1(e, item.name)}>Stream 1</button>\n                <button id=\"2\" onClick={(e) => this.handleClick2(e, item.name)}>Stream 2</button>\n            </div>\n        }))\n        console.log(this.state)\n        return (\n            <div>\n                {yeet}\n                <iframe id={\"embed_\" + this.state.channel1}  src={\"http://player.twitch.tv/?muted=true&channel=\" + this.state.channel1} className=\"stream\" allowFullScreen={true} width=\"700px\" height=\"400px\"></iframe>\n                <iframe id={\"embed_\" + this.state.channel2}  src={\"http://player.twitch.tv/?muted=true&channel=\" + this.state.channel2} className=\"stream\" allowFullScreen={true} width=\"700px\" height=\"400px\"></iframe>\n            </div>\n\n        );\n    }\n\n}","import React from \"react\";\nimport TwitchArticles from \"./TwitchArticles\";\n\n\nexport default class Twitch extends React.Component {\n    state = {\n        users: []\n    }\n    \n    \"https://api.twitch.tv/helix/streams?user_login=\"\n    componentDidMount() {\n        let url = \"https://api.twitch.tv/helix/users/follows?from_id=455825055\"\n        let usrs = [];\n        fetch(url, {\n            method: 'GET',\n            headers: {\n                'Client-ID': 'rc8uqc4k9iv82b8l339oymibbd3nkb'\n            }\n        })\n            .then(Response => Response.json())\n            .then(data => {\n                var newUrl = \"https://api.twitch.tv/helix/streams?\";\n                for(let i = 0; i < data.data.length; i++){\n                    newUrl += \"user_login=\" + data.data[i].to_name + \"&\";\n                }\n                return newUrl.slice(0, newUrl.length - 1);\n            })\n            .then(rtn => {\n                fetch(rtn.toString(), {\n                    method: 'GET',\n                    headers: {\n                        'Client-ID': 'rc8uqc4k9iv82b8l339oymibbd3nkb'\n                    }\n                }).then(Response => Response.json())\n                .then(data => {\n                    for(let j = 0; j < data.data.length; j++){\n                        usrs.push({name: data.data[j].user_name, status: data.data[j].type, title: data.data[j].title})\n                    }\n                    return usrs;\n                })\n                .then(arr => {\n                   this.setState({users: arr});\n                })\n                \n            })\n\n\n    }\n\n    render() {\n        return (\n            <div className=\"twitchMain\">\n                <h4>Twitch</h4>\n                <div id=\"twitch-embed\"></div>\n                \n                <TwitchArticles usrs={this.state.users}/>\n            </div>\n\n        );\n    }\n\n}","import React from 'react';\nimport './App.css';\nimport Novels from \"./components/Novels\"\nimport Twitch from \"./components/Twitch\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"content-head\">\n        <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\">\n          <Navbar.Brand href=\"#home\">KCashew's Home Page</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#home\">Home</Nav.Link>\n            <Nav.Link href=\"#features\">Web Novels</Nav.Link>\n            <Nav.Link href=\"#pricing\">Twitch</Nav.Link>\n          </Nav>\n        </Navbar>\n        <div className=\"content-main\">\n          <Novels />\n          <Twitch />\n        </div>\n\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}